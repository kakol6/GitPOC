<?xml version="1.0" encoding="UTF-8" ?>
<xsl:stylesheet version="2.0" xmlns:ns0="http://xmlns.oracle.com/apps/otm/transmission/v6.4"
                xmlns:mhdr="http://www.oracle.com/XSL/Transform/java/oracle.tip.mediator.service.common.functions.MediatorExtnFunction"
                xmlns:tns="ikea.com/cem/OrderAndDelivery/DeliverySchedule/V0/"
                xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
                xmlns:xsd="http://www.w3.org/2001/XMLSchema"
                xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
                xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
                xmlns:socket="http://www.oracle.com/XSL/Transform/java/oracle.tip.adapter.socket.ProtocolTranslator"
                xmlns:oracle-xsl-mapper="http://www.oracle.com/xsl/mapper/schemas"
                xmlns:b64="http://www.oracle.com/XSL/Transform/java/se.oraclesoa.toolbox.xslt.Base64"
                xmlns:bpelxpath="http://ns.oracle-soa.se/bpel/xpath"
                xmlns:soaxpath="http://ns.oracle-soa.se/aia/bpel/xpath"
                xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
                xmlns:ora="http://schemas.oracle.com/xpath/extension"
                xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
                xmlns:oraxsl="http://www.oracle.com/XSL/Transform/java"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/"
                xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
                xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/"
                xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/"
                xmlns:aol="ikea.com/system/iip/CreateDeliveryScheduleOTMReqABCS/1.0/"
                xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/"
                xmlns:ns1="ikea.com/system/iip/CreateDeliveryScheduleOTMReqABCSService/1.0/"
                xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
                xmlns:plnk="http://schemas.xmlsoap.org/ws/2003/05/partner-link/"
                xmlns:svcdoc="http://xmlns.oracle.com/Services/Documentation/V1"
                xmlns:ns5="urn:oasis:names:tc:xacml:2.0:policy:schema:cd:04"
                xmlns:ebsimpl="ikea.com/system/iip/DeliveryScheduleEnterpriseService/1.0/"
                xmlns:ns2="urn:oasis:names:tc:xacml:2.0:context:schema:cd:04"
                xmlns:ns4="http://schemas.xmlsoap.org/ws/2003/03/addressing"
                xmlns:ns3="http://schemas.oracle.com/service/bpel/common" xmlns:str="http://exslt.org/strings"
                extension-element-prefixes="str" xmlns:fn="http://www.w3.org/2005/xpath-functions"
                exclude-result-prefixes="xsd oracle-xsl-mapper xsi xsl ns0 tns mhdr oraext xp20 xref socket dvm oraxsl"
                xmlns:corecom="ikea.com/system/iip/IIPHeader/1.0/" xmlns:ns6="ikea.com/system/iip/IIPFaultMessage/1.0/">
  <oracle-xsl-mapper:schema>
    <!--SPECIFICATION OF MAP SOURCES AND TARGETS, DO NOT MODIFY.-->
    <oracle-xsl-mapper:mapSources>
      <oracle-xsl-mapper:source type="WSDL">
        <oracle-xsl-mapper:schema location="oramds:/apps/AIAMetaData/IIPComponents/ApplicationObjectLibrary/OTM/V1/wsdls/CreateDeliveryScheduleOTMReqABCS.wsdl"/>
        <oracle-xsl-mapper:rootElement name="Transmission"
                                       namespace="http://xmlns.oracle.com/apps/otm/transmission/v6.4"/>
      </oracle-xsl-mapper:source>
    </oracle-xsl-mapper:mapSources>
    <oracle-xsl-mapper:mapTargets>
      <oracle-xsl-mapper:target type="WSDL">
        <oracle-xsl-mapper:schema location="oramds:/apps/AIAMetaData/IIPComponents/EnterpriseBusinessServiceLibrary/Core/CEM/DeliverySchedule/V1/DeliveryScheduleEBSV1.wsdl"/>
        <oracle-xsl-mapper:rootElement name="CreateDeliveryScheduleEBM"
                                       namespace="ikea.com/cem/OrderAndDelivery/DeliverySchedule/V0/"/>
      </oracle-xsl-mapper:target>
    </oracle-xsl-mapper:mapTargets>
    <oracle-xsl-mapper:substitutions>
      <oracle-xsl-mapper:sourceSubst substPath="/ns0:Transmission/ns0:TransmissionBody/ns0:GLogXMLElement/ns0:GLogXMLTransaction"
                                     substElem="ns0:PlannedShipment"/>
    </oracle-xsl-mapper:substitutions>
    <!--GENERATED BY ORACLE XSL MAPPER 12.2.1.3.0(XSLT Build 170820.1700.2557) AT [MON FEB 17 16:56:12 GMT+05:30 2020].-->
  </oracle-xsl-mapper:schema>
  <!--User Editing allowed BELOW this line - DO NOT DELETE THIS LINE-->
  <xsl:include href="HelperTools.xsl"/>
  <xsl:template match="/">
    <tns:CreateDeliveryScheduleEBM>
      <tns:DataArea>
        <tns:CreateDeliverySchedule>
          <tns:DeliverySchedule>
            <tns:DATA>
              <tns:InInteractive>
                <xsl:choose>
                  <xsl:when test="/ns0:Transmission/ns0:TransmissionBody/ns0:GLogXMLElement/ns0:PlannedShipment/ns0:Shipment/ns0:ShipmentHeader/ns0:ShipmentRefnum[ns0:ShipmentRefnumQualifierGid/ns0:Gid/ns0:Xid = 'SCHEDULE TYPE']/ns0:ShipmentRefnumValue = 'S'">
                    <xsl:value-of select="'false'"/>
                  </xsl:when>
                  <xsl:otherwise>
                    <xsl:value-of select="'true'"/>
                  </xsl:otherwise>
                </xsl:choose>
              </tns:InInteractive>
              <tns:InVoSchedulingRequestITM>
                <xsl:variable name="RequiredLoadingUnitTripInfo">
                  <xsl:call-template name="ExtractLoadingUnitTripInfo">
                    <xsl:with-param name="LoadingUnitTripStr"
                                    select="/ns0:Transmission/ns0:TransmissionBody/ns0:GLogXMLElement/ns0:PlannedShipment/ns0:Shipment/ns0:ShipmentHeader/ns0:Remark[ns0:RemarkQualifierGid/ns0:Gid/ns0:Xid = 'LOADING UNIT TRIP']/ns0:RemarkText"/>
                  </xsl:call-template>
                </xsl:variable>
                
                <xsl:variable name="loadingUnitType">
                  <xsl:call-template name="ParseString">
                    <xsl:with-param name="tempStr" select="$RequiredLoadingUnitTripInfo"/>
                    <xsl:with-param name="position" select="1"></xsl:with-param>
                  </xsl:call-template>
                </xsl:variable>
                <tns:LoadingUnitType>
                  <xsl:choose>
                    <xsl:when test="$loadingUnitType != ''">
                      <xsl:value-of select="$loadingUnitType"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:choose>
                        <xsl:when test="fn:contains(/ns0:Transmission/ns0:TransmissionBody/ns0:GLogXMLElement/ns0:PlannedShipment/ns0:Shipment/ns0:ShipmentHeader/ns0:TransportModeGid/ns0:Gid/ns0:Xid, '-LCL')">
                          <!-- ITMINT-1638 Select only first Release[1]-->
                          <xsl:value-of select='/ns0:Transmission/ns0:TransmissionBody/ns0:GLogXMLElement/ns0:PlannedShipment/ns0:Shipment/ns0:Release[1]/ns0:ReleaseRefnum[ns0:ReleaseRefnumQualifierGid/ns0:Gid/ns0:Xid = "CNS LUT CODE"]/ns0:ReleaseRefnumValue'/>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:value-of select="/ns0:Transmission/ns0:TransmissionBody/ns0:GLogXMLElement/ns0:PlannedShipment/ns0:Shipment/ns0:SEquipment/ns0:EquipmentTypeGid/ns0:Gid/ns0:Xid"/>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </tns:LoadingUnitType>
                <xsl:variable name="ShipmentName"
                              select="/ns0:Transmission/ns0:TransmissionBody/ns0:GLogXMLElement/ns0:PlannedShipment/ns0:Shipment/ns0:ShipmentHeader/ns0:ShipmentName"/>
                <tns:ShipmentType>
                  <xsl:choose>
                    <xsl:when test="fn:starts-with(fn:substring-after(fn:substring-after($ShipmentName, '-'), '-'), 'S')">
                      <xsl:text disable-output-escaping="no">REG</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:text disable-output-escaping="no">EXT</xsl:text>
                    </xsl:otherwise>
                  </xsl:choose>
                </tns:ShipmentType>
                <xsl:variable name="LoadingUnitTypeEdi">
                  <xsl:call-template name="ParseString">
                    <xsl:with-param name="tempStr" select="$RequiredLoadingUnitTripInfo"/>
                    <xsl:with-param name="position" select="2"></xsl:with-param>
                  </xsl:call-template>
                </xsl:variable>
                <tns:LoadingUnitTypeEdi>
                  <xsl:choose>
                    <xsl:when test="$LoadingUnitTypeEdi != '' ">
                      <xsl:value-of select="$LoadingUnitTypeEdi"/>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:value-of select="/ns0:Transmission/ns0:TransmissionBody/ns0:GLogXMLElement/ns0:PlannedShipment/ns0:Shipment/ns0:SEquipment/ns0:ScaleName"/>
                    </xsl:otherwise>
                  </xsl:choose>
                </tns:LoadingUnitTypeEdi>               
                <xsl:variable name="PartLoadFlag">
                  <xsl:call-template name="ParseString">
                    <xsl:with-param name="tempStr" select="$RequiredLoadingUnitTripInfo"/>
                    <xsl:with-param name="position" select="3"></xsl:with-param>
                  </xsl:call-template>
                </xsl:variable>
                <tns:PartLoadFlag>
                  <xsl:choose>
                    <!-- ITMINT-1321 Not equlals null condition added instead of  <xsl:when test="$PartLoadFlag"> -->
                    <xsl:when test="$PartLoadFlag != '' ">
                      <xsl:choose>
                        <xsl:when test="fn:contains($PartLoadFlag, '-LCL')">
                          <xsl:text disable-output-escaping="no">Y</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text disable-output-escaping="no">N</xsl:text>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:choose>
                        <xsl:when test="fn:contains(/ns0:Transmission/ns0:TransmissionBody/ns0:GLogXMLElement/ns0:PlannedShipment/ns0:Shipment/ns0:ShipmentHeader/ns0:TransportModeGid/ns0:Gid/ns0:Xid, '-LCL')">
                          <xsl:text disable-output-escaping="no">Y</xsl:text>
                        </xsl:when>
                        <xsl:otherwise>
                          <xsl:text disable-output-escaping="no">N</xsl:text>
                        </xsl:otherwise>
                      </xsl:choose>
                    </xsl:otherwise>
                  </xsl:choose>
                </tns:PartLoadFlag>
                <tns:TransitShpFlag>
                  <xsl:choose>
                    <xsl:when test='/ns0:Transmission/ns0:TransmissionBody/ns0:GLogXMLElement/ns0:PlannedShipment/ns0:Shipment/ns0:ShipmentHeader/ns0:ShipmentRefnum[ns0:ShipmentRefnumQualifierGid/ns0:Gid/ns0:Xid = "TRANSIT SHARE"]/ns0:ShipmentRefnumValue > 0.0'>
                      <xsl:text disable-output-escaping="no">Y</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                      <xsl:text disable-output-escaping="no">N</xsl:text>
                    </xsl:otherwise>
                  </xsl:choose>
                </tns:TransitShpFlag>
                <tns:OriginSystem>
                  <xsl:text disable-output-escaping="no">ITM</xsl:text>
                </tns:OriginSystem>
                <tns:RequestUser>
                  <xsl:value-of select="/ns0:Transmission/ns0:TransmissionBody/ns0:GLogXMLElement/ns0:PlannedShipment/ns0:Shipment/ns0:ShipmentHeader/ns0:InvolvedParty[ns0:InvolvedPartyQualifierGid/ns0:Gid/ns0:Xid = 'TRANSPORT PLANNER']/ns0:ContactRef/ns0:Contact/ns0:ContactGid/ns0:Gid/ns0:Xid"/>
                </tns:RequestUser>
                <tns:ShipmentId>
                  <xsl:variable name="code" select="fn:substring-before($ShipmentName, '-')"/>
                  <xsl:variable name="buTypeAndShpNum" select="fn:substring-after($ShipmentName, '-')"/>
                  <tns:ShpNumber>
                    <xsl:value-of select="fn:substring-after($buTypeAndShpNum, '-')"/>
                  </tns:ShpNumber>
                  <tns:Creator>
                    <tns:Code>
                      <xsl:value-of select="$code"/>
                    </tns:Code>
                    <tns:BuType>
                      <xsl:value-of select="fn:substring-before($buTypeAndShpNum, '-')"/>
                    </tns:BuType>
                  </tns:Creator>
                </tns:ShipmentId>
                <!-- ITMINT-1895 Changes Started -->
                <xsl:variable name="RequiredTransportAgreementId">
                  <xsl:call-template name="ExtractTransportAgreementId">
                    <xsl:with-param name="TransportAgreementIdStr"
                                    select="/ns0:Transmission/ns0:TransmissionBody/ns0:GLogXMLElement/ns0:PlannedShipment/ns0:Shipment/ns0:ShipmentHeader/ns0:RateOfferingGid/ns0:Gid/ns0:Xid"/>
                  </xsl:call-template>
                </xsl:variable> 
                <xsl:variable name="CreatorPart1">
                  <xsl:call-template name="ParseStringHyphen">
                    <xsl:with-param name="tempStr" select="$RequiredTransportAgreementId"/>
                    <xsl:with-param name="position" select="1"></xsl:with-param>
                  </xsl:call-template>
                </xsl:variable>
                <xsl:variable name="CreatorPart2">
                  <xsl:call-template name="ParseStringHyphen">
                    <xsl:with-param name="tempStr" select="$RequiredTransportAgreementId"/>
                    <xsl:with-param name="position" select="2"></xsl:with-param>
                  </xsl:call-template>
                </xsl:variable>
                <xsl:variable name="TransportAgreementNumber">
                  <xsl:call-template name="ParseStringHyphen">
                    <xsl:with-param name="tempStr" select="$RequiredTransportAgreementId"/>
                    <xsl:with-param name="position" select="3"></xsl:with-param>
                  </xsl:call-template>
                </xsl:variable>
                <xsl:if test="(string-length($CreatorPart1)>0 and string-length($CreatorPart2)>0) or string-length($TransportAgreementNumber)>0">
                <tns:TransportAgreementId>
                <xsl:if test="string-length($CreatorPart1)>0 and string-length($CreatorPart2)>0">                
                  <tns:Creator>
                    <tns:Code>
                      <xsl:value-of select="$CreatorPart1"/>
                    </tns:Code>
                    <tns:BuType>
                      <xsl:value-of select="$CreatorPart2"/>
                    </tns:BuType>
                  </tns:Creator>
                </xsl:if>
                  <xsl:if test="string-length($TransportAgreementNumber)>0">
                    <tns:TransportAgreementNumber>
                      <xsl:value-of select="$TransportAgreementNumber"/>
                    </tns:TransportAgreementNumber>
                  </xsl:if>
                </tns:TransportAgreementId>
                </xsl:if>
                <!-- ITMINT-1895 Changes Ended -->
				<!-- ITMINT-2185 Changes Started  -->
				<xsl:if test="string-length(/ns0:Transmission/ns0:TransmissionBody/ns0:GLogXMLElement/ns0:PlannedShipment/ns0:Shipment/ns0:ShipmentHeader/ns0:ServiceProviderGid/ns0:Gid/ns0:Xid)>0">
                <tns:MainCarrierId>
                    <tns:Code>
                      <xsl:value-of select="fn:substring-after(/ns0:Transmission/ns0:TransmissionBody/ns0:GLogXMLElement/ns0:PlannedShipment/ns0:Shipment/ns0:ShipmentHeader/ns0:ServiceProviderGid/ns0:Gid/ns0:Xid, '-')"/>
                    </tns:Code>
                    <tns:BuType>
                      <xsl:value-of select="fn:substring-before(/ns0:Transmission/ns0:TransmissionBody/ns0:GLogXMLElement/ns0:PlannedShipment/ns0:Shipment/ns0:ShipmentHeader/ns0:ServiceProviderGid/ns0:Gid/ns0:Xid, '-')"/>
                    </tns:BuType>
				</tns:MainCarrierId>
                </xsl:if>
				<!-- ITMINT-2185 Changes Ended  -->				
                <tns:SchedulingLocationList>
                  <xsl:for-each select="/ns0:Transmission/ns0:TransmissionBody/ns0:GLogXMLElement/ns0:PlannedShipment/ns0:Shipment/ns0:ShipmentStop">
                    <xsl:if test="(ns0:StopType='P' or ns0:StopType='D') and not(ns0:Refnum[ns0:RefnumQualifierGid/ns0:Gid/ns0:Xid = 'DISABLE_SCHED']/ns0:RefnumValue)">
                      <tns:VoSchedulingLocation>
                        <tns:Activity>
                          <xsl:choose>
                            <xsl:when test="ns0:StopType='P'">
                              <xsl:text disable-output-escaping="no">L</xsl:text>
                            </xsl:when>
                            <xsl:when test="ns0:StopType='D'">
                              <xsl:text disable-output-escaping="no">U</xsl:text>
                            </xsl:when>
                          </xsl:choose>
                        </tns:Activity>
                        <xsl:variable name="RequiredStopSchedReqInfo">
                          <xsl:call-template name="ExtractStopSchedReqInfo">
                            <xsl:with-param name="StopSchedReqStr"
                                            select="ns0:Refnum[ns0:RefnumQualifierGid/ns0:Gid/ns0:Xid = 'STOP_SCHED_REQ']/ns0:RefnumValue"/>
                          </xsl:call-template>
                        </xsl:variable>
                        <xsl:variable name="sequence">
                          <xsl:call-template name="ParseString">
                            <xsl:with-param name="tempStr" select="$RequiredStopSchedReqInfo"/>
                            <xsl:with-param name="position" select="1"></xsl:with-param>
                          </xsl:call-template>
                        </xsl:variable>
                        <xsl:variable name="buName">
                          <xsl:call-template name="ParseString">
                            <xsl:with-param name="tempStr" select="$RequiredStopSchedReqInfo"/>
                            <xsl:with-param name="position" select="2"></xsl:with-param>
                          </xsl:call-template>
                        </xsl:variable>
                        <xsl:variable name="countryCode">
                          <xsl:call-template name="ParseString">
                            <xsl:with-param name="tempStr" select="$RequiredStopSchedReqInfo"/>
                            <xsl:with-param name="position" select="3"></xsl:with-param>
                          </xsl:call-template>
                        </xsl:variable>
                        <xsl:variable name="considerPlannedTimeFlag">
                          <xsl:call-template name="ParseString">
                            <xsl:with-param name="tempStr" select="$RequiredStopSchedReqInfo"/>
                            <xsl:with-param name="position" select="4"></xsl:with-param>
                          </xsl:call-template>
                        </xsl:variable>
                        <xsl:variable name="activityDate">
                          <xsl:call-template name="ParseString">
                            <xsl:with-param name="tempStr" select="$RequiredStopSchedReqInfo"/>
                            <xsl:with-param name="position" select="5"></xsl:with-param>
                          </xsl:call-template>
                        </xsl:variable>
                        <xsl:variable name="orderedVolumeSum">
                          <xsl:call-template name="ParseString">
                            <xsl:with-param name="tempStr" select="$RequiredStopSchedReqInfo"/>
                            <xsl:with-param name="position" select="6"></xsl:with-param>
                          </xsl:call-template>
                        </xsl:variable>
                        <xsl:variable name="orderedTransitVolumeSum">
                          <xsl:call-template name="ParseString">
                            <xsl:with-param name="tempStr" select="$RequiredStopSchedReqInfo"/>
                            <xsl:with-param name="position" select="7"></xsl:with-param>
                          </xsl:call-template>
                        </xsl:variable>
                        <xsl:variable name="pmCodeMin">
                          <xsl:call-template name="ParseString">
                            <xsl:with-param name="tempStr" select="$RequiredStopSchedReqInfo"/>
                            <xsl:with-param name="position" select="8"></xsl:with-param>
                          </xsl:call-template>
                        </xsl:variable>
                        <xsl:variable name="handlingMaterialFlag">
                          <xsl:call-template name="ParseString">
                            <xsl:with-param name="tempStr" select="$RequiredStopSchedReqInfo"/>
                            <xsl:with-param name="position" select="9"></xsl:with-param>
                          </xsl:call-template>
                        </xsl:variable>
                        <xsl:variable name="distance">
                          <xsl:call-template name="ParseString">
                            <xsl:with-param name="tempStr" select="$RequiredStopSchedReqInfo"/>
                            <xsl:with-param name="position" select="10"></xsl:with-param>
                          </xsl:call-template>
                        </xsl:variable>
                        <tns:ActivityDate>
                          <xsl:value-of select="fn:concat(fn:substring($activityDate, 0, 20),'Z')"/>
                        </tns:ActivityDate>
                        <tns:ActivitySequence>
                          <xsl:value-of select="$sequence"/>
                        </tns:ActivitySequence>
                        <tns:ConsiderPlannedTimeFlag>
                          <xsl:value-of select="$considerPlannedTimeFlag"/>
                        </tns:ConsiderPlannedTimeFlag>
                        <tns:Distance>
                          <xsl:value-of select="$distance"/>
                        </tns:Distance>
                        <tns:OrderedVolumeSum>
                          <xsl:value-of select="$orderedVolumeSum"/>
                        </tns:OrderedVolumeSum>
                        <tns:OrderedTransitVolumeSum>
                          <xsl:value-of select="$orderedTransitVolumeSum"/>
                        </tns:OrderedTransitVolumeSum>
                        <tns:PmCodeMin>
                          <xsl:value-of select="$pmCodeMin"/>
                        </tns:PmCodeMin>
                        <tns:HandlingMaterialFlag>
                          <xsl:value-of select="$handlingMaterialFlag"/>
                        </tns:HandlingMaterialFlag>
                        <tns:BuAddress>
                          <xsl:variable name="BuAddress">
                            <xsl:choose>
                              <xsl:when test="ns0:Refnum[ns0:RefnumQualifierGid/ns0:Gid/ns0:Xid = 'SCHED_FROM']/ns0:RefnumValue != ''">
                                <xsl:value-of select="ns0:Refnum[ns0:RefnumQualifierGid/ns0:Gid/ns0:Xid = 'SCHED_FROM']/ns0:RefnumValue"/>
                              </xsl:when>
                              <xsl:otherwise>
                                <xsl:value-of select="ns0:LocationRef/ns0:LocationGid/ns0:Gid/ns0:Xid"/>
                              </xsl:otherwise>
                            </xsl:choose>
                          </xsl:variable>
                          <xsl:variable name="code" select="fn:substring-before($BuAddress, '-')"/>
                          <xsl:variable name="TypeAndSeq" select="fn:substring-after($BuAddress, '-')"/>
                          <tns:Sequence>
                            <xsl:value-of select="fn:substring-after($TypeAndSeq, '-')"/>
                          </tns:Sequence>
                          <tns:ValidFlag>
                            <xsl:text disable-output-escaping="no">Y</xsl:text>
                          </tns:ValidFlag>
                          <tns:BusinessUnit>
                            <tns:Code>
                              <xsl:value-of select="$code"/>
                            </tns:Code>
                            <tns:BuType>
                              <xsl:value-of select="fn:substring-before($TypeAndSeq, '-')"/>
                            </tns:BuType>
                            <tns:BuName>
                              <xsl:value-of select="$buName"/>
                            </tns:BuName>
                          </tns:BusinessUnit>
                          <tns:Country>
                            <tns:GaCodeCountry>
                              <xsl:value-of select="$countryCode"/>
                            </tns:GaCodeCountry>
                          </tns:Country>
                        </tns:BuAddress>
                        <tns:SchedulingConsignmentList>
                          <xsl:for-each select="ns0:Refnum">
                            <xsl:if test="ns0:RefnumQualifierGid/ns0:Gid/ns0:Xid='CSM DATA'">
                              <xsl:variable name="releaseId"
                                            select="fn:normalize-space(fn:substring-before(ns0:RefnumValue, '|'))"/>
                              <xsl:variable name="RequiredCsmDataInfo">
                                <xsl:call-template name="ExtractCsmDataInfo">
                                  <xsl:with-param name="CsmDataStr" select="ns0:RefnumValue"/>
                                </xsl:call-template>
                              </xsl:variable>
                              <xsl:variable name="ConsignorData"
                                            select="fn:substring-before($RequiredCsmDataInfo, '|')"/>
                              <xsl:variable name="ConsignorTypeAndSeq"
                                            select="fn:substring-after($ConsignorData, '-')"/>
                              <xsl:variable name="ConsigneeData"
                                            select="fn:substring-before(fn:substring-after($RequiredCsmDataInfo, '|'), '|')"/>
                              <xsl:variable name="ConsigneeTypeAndSeq"
                                            select="fn:substring-after($ConsigneeData, '-')"/>
                              <xsl:for-each select="/ns0:Transmission/ns0:TransmissionBody/ns0:GLogXMLElement/ns0:PlannedShipment/ns0:Shipment/ns0:Release">
                                <xsl:if test="$releaseId=ns0:ReleaseGid/ns0:Gid/ns0:Xid">
                                  <tns:VoSchedulingConsignment>
                                    <tns:Message>
                                      <xsl:value-of select="ns0:ReleaseRefnum[ns0:ReleaseRefnumQualifierGid/ns0:Gid/ns0:Xid = 'CONSIGNMENT MESSAGE']/ns0:ReleaseRefnumValue"/>
                                    </tns:Message>
                                    <xsl:variable name="CsmCode"
                                                  select="fn:substring-before(ns0:ReleaseHeader/ns0:ReleaseName, '-')"/>
                                    <xsl:variable name="CsmTypeAndId"
                                                  select="fn:substring-after(ns0:ReleaseHeader/ns0:ReleaseName, '-')"/>
                                    <tns:ConsignmentNumber>
                                      <xsl:value-of select="fn:substring-after($CsmTypeAndId, '-')"/>
                                    </tns:ConsignmentNumber>
                                    <tns:Creator>
                                      <tns:Code>
                                        <xsl:value-of select="$CsmCode"/>
                                      </tns:Code>
                                      <tns:BuType>
                                        <xsl:value-of select="fn:substring-before($CsmTypeAndId, '-')"/>
                                      </tns:BuType>
                                    </tns:Creator>
                                    <xsl:if test="$ConsignorData">
                                      <tns:Consignor>
                                        <tns:Sequence>
                                          <xsl:value-of select="fn:substring-after($ConsignorTypeAndSeq, '-')"/>
                                        </tns:Sequence>
                                        <tns:BusinessUnit>
                                          <tns:Code>
                                            <xsl:value-of select="fn:substring-before($ConsignorData, '-')"/>
                                          </tns:Code>
                                          <tns:BuType>
                                            <xsl:value-of select="fn:substring-before($ConsignorTypeAndSeq, '-')"/>
                                          </tns:BuType>
                                        </tns:BusinessUnit>
                                      </tns:Consignor>
                                    </xsl:if>
                                    <xsl:if test="$ConsigneeData">
                                      <tns:Consignee>
                                        <tns:Sequence>
                                          <xsl:value-of select="fn:substring-after($ConsigneeTypeAndSeq, '-')"/>
                                        </tns:Sequence>
                                        <tns:BusinessUnit>
                                          <tns:Code>
                                            <xsl:value-of select="fn:substring-before($ConsigneeData, '-')"/>
                                          </tns:Code>
                                          <tns:BuType>
                                            <xsl:value-of select="fn:substring-before($ConsigneeTypeAndSeq, '-')"/>
                                          </tns:BuType>
                                        </tns:BusinessUnit>
                                      </tns:Consignee>
                                    </xsl:if>
                                    <tns:OrderedVolume>
                                      <xsl:choose>
                                        <xsl:when test="ns0:TotalWeightVolume/ns0:WeightVolume/ns0:Volume/ns0:VolumeUOMGid/ns0:Gid/ns0:Xid = 'DMQ'">
                                          <xsl:value-of select="(ns0:TotalWeightVolume/ns0:WeightVolume/ns0:Volume/ns0:VolumeValue) * 0.001"/>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:value-of select="ns0:TotalWeightVolume/ns0:WeightVolume/ns0:Volume/ns0:VolumeValue"/>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </tns:OrderedVolume>
                                    <tns:PmCode>
                                      <xsl:value-of select="ns0:ReleaseRefnum[ns0:ReleaseRefnumQualifierGid/ns0:Gid/ns0:Xid = 'CSM STEERING CODE']/ns0:ReleaseRefnumValue"/>
                                    </tns:PmCode>
                                    <tns:TransitFlag>
                                      <xsl:choose>
                                        <xsl:when test="ns0:ReleaseRefnum[ns0:ReleaseRefnumQualifierGid/ns0:Gid/ns0:Xid = 'TRANSIT SHARE']/ns0:ReleaseRefnumValue > 0">
                                          <xsl:text disable-output-escaping="no">Y</xsl:text>
                                        </xsl:when>
                                        <xsl:otherwise>
                                          <xsl:text disable-output-escaping="no">N</xsl:text>
                                        </xsl:otherwise>
                                      </xsl:choose>
                                    </tns:TransitFlag>
                                  </tns:VoSchedulingConsignment>
                                </xsl:if>
                              </xsl:for-each>
                            </xsl:if>
                          </xsl:for-each>
                        </tns:SchedulingConsignmentList>
                      </tns:VoSchedulingLocation>
                    </xsl:if>
                  </xsl:for-each>
                </tns:SchedulingLocationList>
              </tns:InVoSchedulingRequestITM>
            </tns:DATA>
          </tns:DeliverySchedule>
        </tns:CreateDeliverySchedule>
      </tns:DataArea>
    </tns:CreateDeliveryScheduleEBM>
  </xsl:template>
</xsl:stylesheet>